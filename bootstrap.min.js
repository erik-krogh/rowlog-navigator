const Util=($=>{let transition=false;const MAX_UID=1e6;const TransitionEndEvent={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};function toType(obj){return{}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function isElement(obj){return(obj[0]||obj).nodeType}function getSpecialTransitionEndEvent(){return{bindType:transition.end,delegateType:transition.end,handle(event){if($(event.target).is(this)){return event.handleObj.handler.apply(this,arguments)}return undefined}}}function transitionEndTest(){if(window.QUnit){return false}const el=document.createElement("bootstrap");for(const name in TransitionEndEvent){if(typeof el.style[name]!=="undefined"){return{end:TransitionEndEvent[name]}}}return false}function transitionEndEmulator(duration){let called=false;$(this).one(Util.TRANSITION_END,()=>{called=true});setTimeout(()=>{if(!called){Util.triggerTransitionEnd(this)}},duration);return this}function setTransitionEndSupport(){transition=transitionEndTest();$.fn.emulateTransitionEnd=transitionEndEmulator;if(Util.supportsTransitionEnd()){$.event.special[Util.TRANSITION_END]=getSpecialTransitionEndEvent()}}const Util={TRANSITION_END:"bsTransitionEnd",getUID(prefix){do{prefix+=~~(Math.random()*MAX_UID)}while(document.getElementById(prefix));return prefix},getSelectorFromElement(element){let selector=element.getAttribute("data-target");if(!selector||selector==="#"){selector=element.getAttribute("href")||""}try{const $selector=$(selector);return $selector.length>0?selector:null}catch(error){return null}},reflow(element){return element.offsetHeight},triggerTransitionEnd(element){$(element).trigger(transition.end)},supportsTransitionEnd(){return Boolean(transition)},typeCheckConfig(componentName,config,configTypes){for(const property in configTypes){if(Object.prototype.hasOwnProperty.call(configTypes,property)){const expectedTypes=configTypes[property];const value=config[property];const valueType=value&&isElement(value)?"element":toType(value);if(!new RegExp(expectedTypes).test(valueType)){throw new Error(`${componentName.toUpperCase()}: `+`Option "${property}" provided type "${valueType}" `+`but expected type "${expectedTypes}".`)}}}}};setTransitionEndSupport();$(function(){const text=$("textarea.foo").text();$(".bar").html(text)});return Util})(jQuery);export default Util;$(function(){const text=$("textarea.foo").text();$(".bar").html(text)});